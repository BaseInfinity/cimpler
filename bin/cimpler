#!/usr/bin/env node

var childProcess = require('child_process'),
httpTrigger    = require('../lib/http-trigger'),
Git            = require('../lib/git'),
git            = new Git(),
build          = {},
args           = require('optimist')
   .demand(1)
   .usage("Examples:\n" +
   "   cimpler build [-b branch-name]   trigger a build on the current repo\n" +
   "   cimpler status                   echo the list of builds in the queue (* means building)")
   .boolean('tail', {
      default: true,
      describe: 'Blocks until the build is started and tails the log when used with the "build" command.'
   })
   .options('branch', {
      alias: 'b',
      describe: 'Name of the branch to build (defaults to current)'
   })
   .options('port', {
      alias: 'p',
      describe: 'HTTP port of the cimpler server (defaults to value in config.js)'
   }).argv;

var command = args._[0];

switch (command) {
   case 'build':
      git.remote(function(remote, repoPath) {
         build.repo = remote || repoPath;
         getBranch();
      });

      function getBranch() {
         if (args.block) {
            console.log("Blocking until the build has been started... Ctrl-C exits, but won't stop the build")
         }
         var options = {
            tail: args.tail
         };
         if (args.branch) {
            build.branch = args.branch;
            httpTrigger.injectBuild(build, args.port);
         } else {
            git.currentBranch(function(branch) {
               build.branch = branch;
               httpTrigger.injectBuild(build, args.port);
            });
         }
      }
      break;

   case 'status':
      httpTrigger.getStatus(args.port, function(err, builds) {
         builds.building.forEach(function(build) {
            console.log("* " + build.branch);
         });
         builds.queued.forEach(function(build) {
            console.log("  " + build.branch);
         });
         if (builds.building.length == 0 && builds.queued.length == 0) {
            console.log("(no builds in queue)");
         }
      });
      break;

}

