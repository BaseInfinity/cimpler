#!/usr/bin/env node

var net        = require('net'),
util           = require('util'),
util           = require('fs'),
childProcess   = require('child_process'),
execOptions    = {},
defaultTcpPort = 20001,
build          = {},
args           = require('optimist')
   .demand(1)
   .usage("Usage: cimpler test [-b branch-name]")
   .options('branch', {
      alias: 'b',
      describe: 'Name of the branch to test (defaults to current)'
   })
   .options('port', {
      alias: 'p',
      describe: 'TCP port of the cimpler server (defaults to value in config.js)'
   }).argv;


var plugins;
var tcpPort = args.port ||
              ((plugins = loadConfig(__dirname + '/../config.js').plugins) &&
               plugins.cli &&
               plugins.cli.tcpPort) ||
              defaultTcpPort;

exec("git remote -v", function(stdout) {
   // Output looks like:
   // origin  http://remote_url (fetch)
   build.repo = stdout.split(/\s+/)[1];
   getBranch();
});

function getBranch() {
   if (args.branch) {
      build.branch = args.branch;
      return triggerBuild();
   }

   exec("git symbolic-ref HEAD --short", function(stdout) {
      build.branch = stdout.trim();
      triggerBuild();
   });
}

function triggerBuild() {
   process.stdout.write("Triggering build on " + build.branch + " ... ");
   var connection = net.createConnection(tcpPort, "127.0.0.1", function() {
      connection.end(JSON.stringify(build));
   });

   var body = '';
   connection.setEncoding('utf8');
   connection.on('data', function(chunk) {
      body += chunk;
   });

   connection.on('end', function() {
      if (body) {
         console.log(body);
      }

      if (body !== 'OK') {
         process.exit(1);
      }
   });

   connection.on('error', function() {
      console.log("Couldn't connect to cimpler server");
      process.exit(1);
   });
}

function exec(cmd, callback) {
   childProcess.exec(cmd, execOptions, function(err, stdout) {
      if (err) {
         util.error("Command failed: " + cmd);
         process.exit(1);
      }
      callback(stdout.toString());
   });
}


function loadConfig(path) {
   try {
      if (fs.statSync(path)) {
         return require(path);
      }
   } catch (error) {}
   return {};
}
